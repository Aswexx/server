generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  normal
  admin
}

enum NotifType {
  follow
  likePost
  replyPost
  likeComment
  replyComment
  inviteChat
  mention
}

model User {
  id    String  @id @default(uuid()) @db.Char(36)
  name  String  @unique
  alias String  @unique
  email String  @unique
  role  Role    @default(normal)
  bio   String?

  avatarUrl  String
  bgImageUrl String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  posts         Post[]
  comments      Comment[]
  likePosts     LikePost[]
  likeComment   LikeComment[]
  follow        FollowingShip[] @relation("follow")
  followed      FollowingShip[] @relation("followed")
  chatSender    ChatRecord[]    @relation("send")
  chatReciever  ChatRecord[]    @relation("chatTarget")
  notifinformer Notification[]  @relation("inform")
  notifReciever Notification[]  @relation("receive")

  @@map("users")
}

model Post {
  id       String @id @default(uuid()) @db.Char(36)
  contents String

  comments Comment[]

  media    MediaFile? @relation(fields: [mediaUrl], references: [id])
  mediaUrl String?    @unique @map("media_url")

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  liked     LikePost[]

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  notif   Notification? @relation(fields: [notifId], references: [id])
  notifId String?       @unique @map("notif_id")

  @@map("posts")
}

model LikePost {
  id        String   @id @default(uuid()) @db.Char(36)
  createdAt DateTime @default(now()) @map("created_at")

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([postId, userId])
  @@map("like_posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Char(36)
  contents  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  liked LikeComment[]

  onPost Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @map("post_id")

  commentByComments Comment[] @relation("commentByComment")
  onComment         Comment?  @relation("commentByComment", fields: [onCommentId], references: [id], onDelete: Cascade)
  onCommentId       String?   @map("on_comment_id")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  media    MediaFile? @relation(fields: [mediaUrl], references: [id])
  mediaUrl String?    @unique @map("media_url")

  notif   Notification? @relation(fields: [notifId], references: [id])
  notifId String?       @unique @map("notif_id")

  @@map("comments")
}

model LikeComment {
  id String @id @default(uuid()) @db.Char(36)

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @map("comment_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([commentId, userId])
  @@map("like_comments")
}

model FollowingShip {
  id         String @id @default(uuid()) @db.Char(36)
  follower   User   @relation("follow", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @map("follower_id")

  followed   User   @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String @map("followed_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([followerId, followedId])
  @@map("following_ships")
}

model MediaFile {
  id        String   @id @default(uuid()) @db.Char(36)
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  post      Post?
  comment   Comment?
  type      String

  @@map("media_file")
}

model LoginInfo {
  id         String @id @default(uuid()) @db.Char(36)
  loginEmail String @unique @map("login_email")
  password   String @unique

  @@map("login_info")
}

model Notification {
  id String @id @default(uuid()) @db.Char(36)

  isRead Boolean @default(false)

  receiver   User   @relation("receive", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String @map("receiver_id")

  notifType NotifType @map("notif_type")

  informer   User   @relation("inform", fields: [informerId], references: [id], onDelete: Cascade)
  informerId String @map("informer_id")

  targetPost   Post?
  targetPostId String? @map("target_post_id")

  targetComment   Comment?
  targetCommentId String?  @map("target_comment_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("notifications")
}

model ChatRecord {
  id       String @id @default(uuid()) @db.Char(36)
  sender   User   @relation("send", fields: [senderId], references: [id])
  senderId String @map("sender_id")

  contents String

  chatTarget   User   @relation("chatTarget", fields: [chatTargetId], references: [id])
  chatTargetId String @map("chat_target_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("chat_records")
}
