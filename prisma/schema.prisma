generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  normal
  admin
}

model User {
  id    String  @id @default(uuid()) @db.Char(36)
  name  String  @unique
  alias String  @unique
  email String  @unique
  role  Role    @default(normal)
  bio   String?

  avatar    Image? @relation("avatar", fields: [avatarUrl], references: [id])
  avatarUrl String @unique @map("avatar_url")

  bgImage    Image? @relation("bgImage", fields: [bgImageUrl], references: [id])
  bgImageUrl String @unique @map("bg_image_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  posts       Post[]
  comments    Comment[]
  likePosts   LikePost[]
  likeComment LikeComment[]
  follow      FollowingShip[] @relation("follow")
  followed    FollowingShip[] @relation("followed")

  @@map("users")
}

model Post {
  id       String @id @default(uuid()) @db.Char(36)
  contents String

  comments Comment[]

  image    Image?  @relation(fields: [imageUrl], references: [id])
  imageUrl String? @unique @map("image_url")

  video    Video?  @relation(fields: [videoUrl], references: [id])
  videoUrl String? @unique @map("video_url")

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")
  liked     LikePost[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  @@map("posts")
}

model Video {
  id        String   @id @default(uuid()) @db.Char(36)
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  post Post?

  @@map("videos")
}

model LikePost {
  id        String   @id @default(uuid()) @db.Char(36)
  createdAt DateTime @default(now()) @map("created_at")

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("like_posts")
}

// TODO:add new field commentOnComment
model Comment {
  id        String   @id @default(uuid()) @db.Char(36)
  contents  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  liked LikeComment[]

  onPost Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  image    Image?  @relation(fields: [imageUrl], references: [id])
  imageUrl String? @unique @map("image_url")

  @@map("comments")
}

model LikeComment {
  id String @id @default(uuid()) @db.Char(36)

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @map("comment_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("like_comments")
}

model FollowingShip {
  id         String @id @default(uuid()) @db.Char(36)
  follower   User   @relation("follow", fields: [followerId], references: [id])
  followerId String @map("follower_id")

  followed   User   @relation("followed", fields: [followedId], references: [id])
  followedId String @map("followed_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([followerId, followedId])
  @@map("following_ships")
}

model Image {
  id        String   @id @default(uuid()) @db.Char(36)
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  avatarUser  User?    @relation("avatar")
  bgImageUser User?    @relation("bgImage")
  post        Post?
  comment     Comment?

  @@map("images")
}
